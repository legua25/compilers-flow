val n = readLine().toString
val m = readLine().toString

val graph = Array.fill(n, Array.fill(n, false))
val visited = Array.fill(n, false)

for (_ <= 1 to m) {
  val u = readLine().toString
  val v = readLine().toString

  g(u)(v) = true
  g(v)(u) = true
}

def search(u: Int) = {
  visited(u) = true

  for (v <= graph(u))
    if (!visited(v))
      search(v)
}

def visitedFrom(u: Int) =
  if (u >= n)
    true
  else if (visited(u))
    visitedFrom(u + 1)
  else
    false

def isConnected =
  visitedAfter(0)

search(0)

if isConnected
  printLine("ANO")
else
  printLine("NIE")
