def insertionSort(array: IntArray): Unit = {
  for nrOfSorted <- 1 until array.size do {
    var i = nrOfSorted

    // while i > 0 && array(i - 1) > array(i) do {
    // doesn't work until && is shortcircuited
    while if i > 0 then array(i - 1) > array(i) else false do {
      val tmp: Int = array(i - 1)
      array(i - 1) = array(i)
      array(i) = tmp

      i -= 1
    }
  }
}

/**
 * Sorts an $array in-place.
 */
def mergeSort(array: IntArray): Unit = {
  if array.size <= 10 then {
    insertionSort(array)
  }
  else {
    val middle = array.size / 2

    val fstHalf = array.subsequence(0, middle)
    val sndHalf = array.subsequence(middle)

    mergeSort(fstHalf)
    mergeSort(sndHalf)

    var i, fi, si = 0

    while fi < fstHalf.size && si < sndHalf.size do {
      if fstHalf(fi) < sndHalf(si) then {
        array(i) = fstHalf(fi)
        fi += 1
      }
      else {
        array(i) = sndHalf(si)
        si += 1
      }
      i += 1
    }

    while fi < fstHalf.size do {
      array(i) = fstHalf(fi)
      fi += 1
      i += 1
    }

    while si < sndHalf.size do {
      array(i) = sndHalf(si)
      si += 1
      i += 1
    }

    fstHalf.clear()
    sndHalf.clear()
  }
}

val n = readInt()
val array = IntArray(n)

for i <- 0 until n do {
  array(i) = readInt()
}

if false then insertionSort(array)
else mergeSort(array)

for i <- 0 until n do {
  printLine(array(i))
}
